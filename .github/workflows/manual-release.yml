name: "publish"

on:
  push:
    branches:
      - release

# `tauri-action` can also upload app bundles to an existing GitHub release.
# This workflow uses different actions to create and publish the release.
# `tauri-action` will only build and upload the app bundles to the specified release.

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./packages/app/src-tauri/tauri.conf.json').package.version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false,
            })
            return data.id

  build-tauri-standard:
    env:
      WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/62641e01-1e8d-4ace-91d6-ae03f7f8a71f/w_BaseKit_p_2024.0.0.49563_offline.exe
      WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.cpp-dpcpp-common
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, macos-13, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install dependencies (ubuntu)
        if: matrix.platform == 'ubuntu-20.04'
        uses: myci-actions/add-deb-repo@11
        with:
          repo: deb https://apt.repos.intel.com/oneapi all main
          repo-name: intel_onemkl
          keys-asc: https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          install: libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libasound2-dev intel-oneapi-mkl-devel

      - name: mkl cache (windows)
        id: mkl-cache-install
        if: matrix.platform == 'windows-latest'
        uses: actions/cache@v2
        with:
          path: |
            C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat
            C:\Program Files (x86)\Intel\oneAPI\compiler
            C:\Program Files (x86)\Intel\oneAPI\tbb
            C:\Windows\System32\OpenCL.dll
          key: install-${{ env.WINDOWS_BASEKIT_URL }}-${{ env.WINDOWS_DPCPP_COMPONENTS }}-compiler-tbb-opencl
  
      - name: mkl install (windows)
        if: matrix.platform == 'windows-latest' && steps.mkl-cache-install.outputs.cache-hit != 'true'
        run: .github/mkl_scripts/install_windows.bat ${{ env.WINDOWS_BASEKIT_URL }} ${{ env.WINDOWS_DPCPP_COMPONENTS }}
  
      - name: exclude unused files from mkl cache (windows)
        if: matrix.platform == 'windows-latest' && steps.mkl-cache-install.outputs.cache-hit != 'true'
        shell: bash
        run: .github/mkl_scripts/cache_exclude_windows.sh

      - name: install frontend dependencies
        run: npm install

      - name: build ui
        run: npm run build:ui

      - name: rustc details
        run: rustc -vV

      - name: enable features
        run: node .github/enable_features.js 

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          updaterJsonPreferNsis: false

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri-standard]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
